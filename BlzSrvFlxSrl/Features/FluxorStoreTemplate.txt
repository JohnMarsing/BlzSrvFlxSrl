
// 1. Action
public record HeaderSubmitAction(FormVM FormVM);
public record HeaderSubmitSuccessAction();
public record HeaderSubmitFailureAction(string ErrorMessage);

 5. Effects 
public class FooEffectsServer 
{
	#region Constructor and DI
		public FooEffectsServer(logger, Repository, Toast)
	#endregion
}


public class FooEffectsWASM
{
	private readonly HttpClient _httpClient;
	public FooEffectsWASM(HttpClient httpClient)
	{
		_httpClient = httpClient;
	}

	[EffectMethod]
	public async Task SubmitSpecialEvents(SpecialEventsSubmitAction action, IDispatcher dispatcher)
	{
		await Task.Delay(500); // just so we can see the "submitting" message
		var response = await _httpClient.PostAsJsonAsync("Feedback", action.SpecialEventsModel);

		if (response.IsSuccessStatusCode)
		{
			dispatcher.Dispatch(new SpecialEventsSubmitSuccessAction());
		}
		else
		{
			dispatcher.Dispatch(new SpecialEventsSubmitFailureAction(response.ReasonPhrase));
		}
	}
}
